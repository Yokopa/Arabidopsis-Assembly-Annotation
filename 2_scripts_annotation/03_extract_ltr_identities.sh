#!/usr/bin/env bash

#================================================================
# SCRIPT NAME: 
#   03_extract_ltr_identities.sh
#
# DESCRIPTION: 
#   This script extracts and combines information about LTR (Long Terminal Repeat) 
#   sequences, including their identity percentages and clade classifications.
#   The script performs the following:
#   1. Extracts LTR names and their corresponding identity values from a GFF3 file.
#   2. Matches the extracted LTR identities with clade information from a separate 
#      classification file (TSV format).
#   The resulting data is saved to a new TSV file containing the LTR name, 
#   clade information, and percent identity.
#
# USAGE:
#   sbatch 03_extract_ltr_identities.sh
#
# NOTES:
#   - The script uses `awk` for text processing to extract and merge data.
#================================================================

#SBATCH --time=01:00:00
#SBATCH --mem=4G
#SBATCH --cpus-per-task=4
#SBATCH --job-name=ltr_identity_clades
#SBATCH --mail-user=anna.scarpellinipancrazi@students.unibe.ch
#SBATCH --mail-type=end
#SBATCH --output=/data/users/ascarpellini/assembly_annotation_course/genome_annotation/logs/03_ltr_identity_clades_output_%A.o
#SBATCH --error=/data/users/ascarpellini/assembly_annotation_course/genome_annotation/logs/03_ltr_identity_clades_error_%A.e
#SBATCH --partition=pibu_el8

# Working directory
WORKDIR="/data/users/ascarpellini/assembly_annotation_course/genome_annotation"
OUTDIR="$WORKDIR/outputs"

# Input files:
# The input GFF3 file generated by the EDTA pipeline, which contains LTR annotations, including LTR names and identity values.
GFF3_FILE="$WORKDIR/outputs/01_edta_TE/assembly.fasta.mod.EDTA.raw/LTR/assembly.fasta.mod.LTR.intact.gff3"
# The input TSV file generated by TEsorter, which contains clade classifications for the identified LTRs.
CLS_TSV_FILE="$WORKDIR/outputs/02_tesorter_TE/assembly.fasta.mod.LTR.intact.fa.rexdb-plant.cls.tsv"

mkdir -p $OUTDIR

# Extract LTR Names and their corresponding LTR identities from the GFF3 file
awk '
BEGIN {
    FS="\t"; OFS="\t";  # Set input and output field separators
    print "LTR_Name", "LTR_Identity";  # Print header
}
$1 ~ /^contig_/ {
    split($9, attr, ";");  # Split the attributes field
    ltr_name = "";  # Initialize ltr_name
    ltr_identity = "";  # Initialize ltr_identity
    for (i in attr) {
        if (attr[i] ~ /Name=/) {
            split(attr[i], name_parts, "=");  # Get the Name attribute
            ltr_name = name_parts[2];  # Assign the Name value to ltr_name
        }
        if (attr[i] ~ /ltr_identity=/) {
            split(attr[i], identity_parts, "=");  # Get ltr_identity
            ltr_identity = identity_parts[2];  # Assign the identity value
        }
    }
    if (ltr_name && ltr_identity) {
        unique[ltr_name] = ltr_identity;  # Store only unique LTR names with their identity
    }
}
END {
    for (name in unique) {
        print name, unique[name];  # Print unique LTR names and their identities
    }
}
' "$GFF3_FILE" > "$OUTDIR/03_ltr_identities.tsv"

# Match extracted LTR identities with clade information from cls.tsv
awk '
BEGIN {
    FS="\t"; OFS="\t";
    print "LTR_Name", "Clade", "Percent_Identity";  # Header for output file
}
FNR==NR {
    ltr_identity[$1] = $2;  # First file (ltr_identities.tsv): LTR Name and its Percent Identity
    next;
}
# Process the second file (cls.tsv)
$1 ~ /^contig/ {
    split($1, contig_info, "#");  # Split on "#" to isolate LTR name
    ltr_name = contig_info[1];    # Extract LTR name (e.g., contig_1:606658..619921)
    if (ltr_identity[ltr_name] != "") {
        print ltr_name, $4, ltr_identity[ltr_name];  # Print LTR Name, Clade (4th column), and Percent Identity
    }
}
' "$OUTDIR/03_ltr_identities.tsv" "$CLS_TSV_FILE" > "$OUTDIR/03_ltr_extracted_data.tsv"
